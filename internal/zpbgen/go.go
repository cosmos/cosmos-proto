package zpbgen

import (
	"fmt"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/pluginpb"

	"github.com/cosmos/cosmos-proto/generator"
)

const (
	zeropbImport       = protogen.GoImportPath("github.com/cosmos/cosmos-proto/zeropb")
	protoreflectImport = protogen.GoImportPath("google.golang.org/protobuf/reflect/protoreflect")
	protoifaceImport   = protogen.GoImportPath("google.golang.org/protobuf/runtime/protoiface")
)

func GoPluginRunner(p *protogen.Plugin) error {
	p.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)

	for _, f := range p.Files {
		if !f.Generate {
			continue
		}

		gen := p.NewGeneratedFile(fmt.Sprintf("%s.zpb.go", f.GeneratedFilenamePrefix), f.GoImportPath)
		cgen := &generator.GeneratedFile{
			GeneratedFile: gen,
			LocalPackages: map[string]bool{},
		}
		fgen := goGen{GeneratedFile: cgen, file: f}
		err := fgen.gen()
		if err != nil {
			return err
		}
	}
	return nil
}

type goGen struct {
	*generator.GeneratedFile
	file *protogen.File
}

func (g goGen) gen() error {
	g.P("// Code generated by protoc-gen-go-zeropb. DO NOT EDIT.")
	g.P()
	g.P("package ", g.file.GoPackageName)
	g.P()
	for _, msg := range g.file.Messages {
		err := g.genMessage(msg)
		if err != nil {
			return err
		}
	}

	return nil
}

func (g goGen) genMessage(msg *protogen.Message) error {
	md, err := newZeroCopyDescriptor(msg)
	if err != nil {
		return err
	}

	g.P("type ", msg.GoIdent.GoName, " struct {")
	g.P("ctx *", zeropbImport.Ident("BufferContext"))
	g.P("}")
	g.P()

	for _, field := range md.fields {
		err := g.genField(field)
		if err != nil {
			return err
		}
	}

	return g.genProtoIface(msg)
}

func (g goGen) genField(field *zeroCopyFieldDescriptor) error {
	if scalarType := scalarGoType(field.Desc.Kind()); scalarType != "" {
		g.P("func (m *", field.Parent.GoIdent.GoName, ") ", field.GoName, "() ", scalarType, " {")
		switch field.Desc.Kind() {
		case protoreflect.BoolKind, protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Sfixed32Kind,
			protoreflect.Uint32Kind, protoreflect.Fixed32Kind, protoreflect.Int64Kind, protoreflect.Sint64Kind,
			protoreflect.Sfixed64Kind, protoreflect.Uint64Kind, protoreflect.Fixed64Kind, protoreflect.FloatKind,
			protoreflect.DoubleKind:
			g.P("return ", g.getExpr(field))
		}
		g.P("}")
		g.P()
	} else {
		g.P("// TODO ", field.GoName, " ", field.Desc.Kind())
		switch field.Desc.Kind() {
		default:
		}
	}

	return nil
}

func scalarGoType(kind protoreflect.Kind) string {
	switch kind {
	case protoreflect.BoolKind:
		return "bool"
	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Sfixed32Kind:
		return "int32"
	case protoreflect.Uint32Kind, protoreflect.Fixed32Kind:
		return "uint32"
	case protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Sfixed64Kind:
		return "int64"
	case protoreflect.Uint64Kind, protoreflect.Fixed64Kind:
		return "uint64"
	case protoreflect.FloatKind:
		return "float32"
	case protoreflect.DoubleKind:
		return "float64"
	default:
		return ""
	}
}

func (g goGen) genProtoIface(msg *protogen.Message) error {
	err := g.genProtoReflect(msg)
	if err != nil {
		return err
	}

	g.P("func (m *", msg.GoIdent, ") Reset() {}")
	g.P("func (m *", msg.GoIdent, ") ProtoMessage() {}")
	g.P("func (m *", msg.GoIdent, ") String() string { return \"\" }")
	g.P()

	return nil
}
